# yaml-language-server: $schema=https://json.schemastore.org/traefik-v3.json

# Static configuration - restart Traefik to apply the changes
# Configuration via environment variables: https://doc.traefik.io/traefik/reference/static-configuration/env/

global:
  checkNewVersion: false
  sendAnonymousUsage: false

api:
  dashboard: true

log:
  filePath: /logs/traefik.log # Sets the path where Traefik will write logs
  level: INFO # By default, the level is set to ERROR. Alternative logging levels are TRACE, DEBUG, INFO, WARN, ERROR, FATAL, and PANIC

accessLog:
  filePath: /logs/traefik-access.log
  bufferingSize: 50

providers:
  providersThrottleDuration: 2s

  # File provider for connecting things that are outside of docker / defining middleware
  file:
    directory: /etc/traefik/dynamic
    watch: true

  # Docker provider for connecting all apps that are inside of the docker network
  docker:
    watch: true
    network: proxy
    defaultRule: 'Host(`{{ index .Labels "com.docker.compose.service"}}.{{env "MYDOMAIN"}}`)'  # Default host rule: containername.domain.tld
    exposedByDefault: false  # Do not expose containers to the outside world unless explicitly configured

entryPoints:
  # !!! If there is no TLS certificate available:
  #   - Enable this entrypoint
  #   - Disable the other 'web' entrypoint
  #   - WARNING: this is an insecure configuration, not recommended to use
  #   - Note: Additional setup is needed to enable inter-service communication, links on the dashboard, etc.
  #     See this PR for the necessary changes: https://github.com/bubacoder/infra/pull/85
  #
  # HTTP entrypoint, listen on port 80, redirect to https
  # web:
  #   address: :80
  #   asDefault: true

  # !!! If an TLS certificate is configured:
  #   - Enable this entrypoint (will redirect to HTTPS)
  #   - Disable the other 'web' entrypoint
  #
  # HTTP entrypoint, listen on port 80, redirect all HTTP traffic to the HTTPS entrypoint
  web:
    address: :80
    asDefault: false
    http:
      redirections:
        entryPoint:
          to: websecure
          scheme: https

  # HTTPS entrypoint, listen on port 443
  # Note: Two entrypoints cannot listen on the same port
  websecure:
    address: :443
    asDefault: true
    http3:
      advertisedPort: 443
    http:
      tls:
        certResolver: letsencrypt # Configures the HTTPS entrypoint to use certificates obtained from the Let's Encrypt CA
        # domains: -> configured by TRAEFIK_ENTRYPOINTS_WEBSECURE_HTTP_TLS_DOMAINS_* env var
      middlewares:
        - https-only@file

# https://doc.traefik.io/traefik/user-guides/docker-compose/acme-dns/
# OVH:
#   https://go-acme.github.io/lego/dns/ovh/
#   https://medium.com/nephely/configure-traefik-for-the-dns-01-challenge-with-ovh-as-dns-provider-c737670c0434
# Cloudflare:
#   https://go-acme.github.io/lego/dns/cloudflare/
certificatesResolvers:
  letsencrypt:
    acme:
      # email: -> configured by TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL env var. Sets the email address to use when registering with the Let's Encrypt CA
      storage: /letsencrypt/acme.json # Sets the path where Traefik will store ACME data (such as obtained certificates)
      dnsChallenge:
        provider: cloudflare # Configures Cloudflare as the DNS provider to use for the ACME DNS challenge
        delayBeforeCheck: "10" # Specifies the number of seconds to wait before checking if the DNS propagation is completed
        resolvers:
          - "1.1.1.1:53" # Specifies a list of DNS resolvers to use for the DNS queries
          - "8.8.8.8:53"

experimental:
  plugins:
    # Crowdsec Bouncer Traefik Plugin
    # https://plugins.traefik.io/plugins/6335346ca4caa9ddeffda116/crowdsec-bouncer-traefik-plugin
    crowdsec-bouncer-traefik-plugin:
      moduleName: "github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin"
      version: "v1.4.1"
