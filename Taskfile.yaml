# https://taskfile.dev/ - Task is a task runner / build tool that aims to be simpler and easier to use than, for example, GNU Make.
# [Say Goodbye to Makefile - Use Taskfile to Manage Tasks in CI/CD Pipelines and Locally](https://www.youtube.com/watch?v=Z7EnwBaJzCk)
# Installed via the `debian_developer` Ansible role.

version: '3'

includes:
  ansible: ./ansible/Taskfile.ansible.yaml
  docker: ./docker/Taskfile.docker.yaml
  app: ./docker/Taskfile.apps.yaml
  crowdsec: ./docker/security/Taskfile.crowdsec.yaml
  docs: ./docs/web/Taskfile.web.yaml
  devcontainer: ./.devcontainer/Taskfile.dev.yaml

tasks:
  default:
    desc: List all tasks
    cmds:
      - task --list-all

  # TaskUI is a lightweight terminal user interface for executing tasks defined using taskfile.dev.
  # https://github.com/thmshmm/taskui
  ui:
    desc: Open terminal user interface for executing tasks (TaskUI)
    env:
      TASKUI_HIGHLIGHT_STYLE_BG: "#00cc66"
      TASKUI_HIGHLIGHT_STYLE_FG: "#4c4f69"
    cmds:
      - taskui

  ### Development-related tasks

  # See https://pre-commit.com for more information
  lint:
    desc: Run linting tools (via pre-commit)
    cmds:
      - pre-commit run --all-files

  git-rebase-fixup:
    desc: Interactively rebase current branch to origin (stash, rebase, pop)
    cmds:
      - git stash
      - GIT_SEQUENCE_EDITOR=scripts/git-rebase-fixup.py git rebase -i origin/$(git branch --show-current)
      - git stash pop

  build:
    desc: Run all linting and build tasks
    cmds:
      - task: docker:create-example-env
      - task: docs-deploy
      - task: pre-commit-update
      - task: lint

  pre-commit-update:
    desc: Update pre-commit repositories
    cmds:
      - pre-commit autoupdate

  renovate:
    desc: Run Renovatebot locally
    cmds:
      - docker run --rm -v .:/usr/src/app -e LOG_LEVEL=debug renovate/renovate --platform local

  clean:
    desc: Clear generated files and cache data
    cmds:
      - task: docs:clean
      - cd terraform && make clean

  btrfs-compsize:
    desc: Show btrfs compression statistics
    silent: true
    cmds:
      - |
        if ! command -v compsize >/dev/null 2>&1; then
          echo "Error: compsize is not installed. Please install it first."
          exit 1
        fi
        if ! findmnt -n -o FSTYPE / | grep -q "btrfs"; then
          echo "Error: Root filesystem is not btrfs"
          exit 1
        fi
        echo "Analyzing btrfs compression stats (this may take a while)..."
        sudo compsize -x /

  star-github-repos:
    desc: Add star to all GitHub repositories referenced in documentation/configuration
    dotenv: ['config/docker/.env']
    preconditions:
      - sh: "[ ! -z \"${GITHUB_API_TOKEN}\" ]"
        msg: GITHUB_API_TOKEN environment variable must be set (exported)
    cmds:
      - scripts/github-extract-links.py . | sort | uniq | scripts/github-star-repo.py

  ### Operations-related tasks

  docker-command:
    internal: true
    cmds:
      - docker/labctl.py service {{.COMMAND}} {{.SERVICE}}

  get-public-ip:
    desc: Display the public IP of the server (using ipinfo.io)
    cmds:
      - curl -s https://ipinfo.io/ip

  versions:
    desc: Show version numbers of the installed software
    cmds:
      - lsb_release -a
      - uname -a
      - ansible --version
      - terraform --version
      - docker --version || true

  backup-config:
    desc: Create a compressed backup of the configuration directory
    cmds:
      - mkdir -p ../infra-config-backup
      - cd config && tar -cjf "../infra-config-backup/infra-config-$(date +%Y-%m-%d_%H-%M-%S).tar.bz2" .
      - ls -lh ../infra-config-backup/infra-config-*.tar.bz2 | tail -n 5

  get-offline-data:
    desc: Download data files for offline use (stored both local and on Proxmox)
    cmds:
      - task: get-offline-data-local
      - task: get-offline-data-proxmox

  get-offline-data-local:
    desc: Download data files for offline use (files stored on localhost)
    dotenv:
      - 'config/docker/.env'
      - 'config/docker/localhost/.env'
    cmds:
      - scripts/get-offline-data-ollama.sh
      - docker exec ollama ollama list
      - |
        scripts/get-offline-data-file.sh $STORAGE_KIWIX "https://download.kiwix.org/zim/wikipedia/" "wikipedia_hu_top_maxi_[0-9]{4}-[0-9]{2}\.zim"
        scripts/get-offline-data-file.sh $STORAGE_KIWIX "https://download.kiwix.org/zim/wikipedia/" "wikipedia_en_top_maxi_[0-9]{4}-[0-9]{2}\.zim"
        scripts/get-offline-data-file.sh $STORAGE_KIWIX "https://download.kiwix.org/zim/other/" "zimgit-post-disaster_en_[0-9]{4}-[0-9]{2}\.zim"
        scripts/get-offline-data-file.sh $STORAGE_KIWIX "https://download.kiwix.org/zim/zimit/" "www.ready.gov_en_[0-9]{4}-[0-9]{2}\.zim"
      - ls -lh $STORAGE_KIWIX
      - |
        mkdir -p $STORAGE_KIWIX/app
        scripts/get-offline-data-file.sh $STORAGE_KIWIX/app "https://download.kiwix.org/release/kiwix-android/" "kiwix-[0-9]+\.[0-9]+\.[0-9]+\.apk"
        scripts/get-offline-data-file.sh $STORAGE_KIWIX/app "https://download.kiwix.org/release/kiwix-desktop/" "kiwix-desktop_windows_x64_[0-9]+\.[0-9]+\.[0-9]+\.zip"
      - ls -lh $STORAGE_KIWIX/app

  get-offline-data-proxmox:
    desc: Download data files for offline use (files stored on proxmox host)
    env:
      PROXMOX: "root@proxmox"
    cmds:
      - ssh ${PROXMOX} "bash -s" -- --download-only < proxmox/create-openwrt-vm.sh
      - ssh ${PROXMOX} "bash -s" -- --download-only < proxmox/create-ubuntu-server-vm.sh
      # TODO Add Proxmox ISO
      # TODO Add Linux Mint ISO

  show-remote-mounts:
    desc: Display mounted SMB network shares
    cmds:
      - findmnt -t cifs
